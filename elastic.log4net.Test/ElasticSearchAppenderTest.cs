using System;
using System.Threading;
using System.Threading.Tasks;
using AutoFixture;
using log4net;
using elastic;
using log4net.Config;
using log4net.Repository;
using Moq;
using Newtonsoft.Json;
using NUnit.Framework;
using log4net.Core;

namespace elastic.log4net.Test
{
    [TestFixture]
    public class ElasticSearchAppenderTest
    {
        private Fixture fixture = new Fixture();
        private Mock<Nest.IElasticClient> mockedElasticClient;
        private Appender.ElasticSearchAppender appender;
        private ILog logService;

        [OneTimeSetUp]
        public void Init()
        {   
            this.mockedElasticClient = new Mock<Nest.IElasticClient>();
            InitializeService();
        }

        [SetUp]
        public void Clean()
        {
            this.mockedElasticClient = new Mock<Nest.IElasticClient>();
            InitializeService();
        }

        private void InitializeService()
        {
            ILoggerRepository repository = LogManager.CreateRepository(Guid.NewGuid().ToString());
            this.appender = new Appender.ElasticSearchAppender();
            this.appender.Client = mockedElasticClient.Object;

            BasicConfigurator.Configure(repository, this.appender);

            this.logService = LogManager.GetLogger(repository.Name, "LogMessageAreCorrectlySendToElasticSearch");
        }

        [Test]
        public void ShouldLogMessageWithoutAutogeneratedIndexPatternSendToElasticSearch()
        {

            this.logService.Error("Testing error message", fixture.Create<InvalidOperationException>());
            this.logService.Debug("Debug message", fixture.Create<InvalidOperationException>());

            mockedElasticClient.Verify(m => m.IndexDocumentAsync(It.IsAny<Model.LogEntry>(), It.IsAny<CancellationToken>()), Times.Exactly(2));
            mockedElasticClient.Verify(m => m.IndexAsync(It.IsAny<Model.LogEntry>(),
                It.IsAny<Func<Nest.IndexDescriptor<Model.LogEntry>, Nest.IIndexRequest<Model.LogEntry>>>(),
                It.IsAny<CancellationToken>()), Times.Never);
        }

        [Test]
        public void ShouldLogMessageWithAutogeneratedIndexPatternSendToElasticSearch()
        {
            this.appender.IndexPattern = "dd-MM-yyyy";

            this.logService.Error("Testing error message", fixture.Create<InvalidOperationException>());
            this.logService.Debug("Debug message", fixture.Create<InvalidOperationException>());

            mockedElasticClient.Verify(m => m.IndexDocumentAsync(It.IsAny<Model.LogEntry>(), It.IsAny<CancellationToken>()), Times.Never);
            mockedElasticClient.Verify(m => m.IndexAsync<Model.LogEntry>(It.IsAny<Model.LogEntry>(),
                It.IsAny<Func<Nest.IndexDescriptor<Model.LogEntry>, Nest.IIndexRequest<Model.LogEntry>>>(),
                It.IsAny<CancellationToken>()), Times.Exactly(2));
        }

        [Test]
        public void ShouldRetryErrorMessagesThreeTimesBeforeDiscardIt()
        {
            this.appender.RetryErrorsConfiguration = new RetryErrorsConfiguration { MaxNumberOfRetries = 2, WaitTimeBetweenRetry = 50};
            this.appender.Client = mockedElasticClient.Object;

            var indexResponse = "{\"_index\":\"logEntry\",\"_type\":\"log\",\"_id\":\"20\",\"_version\":\"1.0.0\",\"created\":false}";
            var response = JsonConvert.DeserializeObject<Nest.IndexResponse>(indexResponse);
            mockedElasticClient.Setup(x => x.IndexDocumentAsync(It.IsAny<Model.LogEntry>(), 
                It.IsAny<CancellationToken>()))
                .Returns(Task.FromResult<Nest.IIndexResponse>(response));

            this.logService.Error("Testing error message", fixture.Create<InvalidOperationException>());

            Thread.Sleep(2000);

            mockedElasticClient.Verify(m => m.IndexDocumentAsync(It.IsAny<Model.LogEntry>(), It.IsAny<CancellationToken>()), Times.Exactly(3));
        }

        [Test]
        public void ShouldRetryOnlyErrorMessagesAndNoMessagesWithLessPriority()
        {
            this.appender.RetryErrorsConfiguration = new RetryErrorsConfiguration { MaxNumberOfRetries = 1, WaitTimeBetweenRetry = 50, MinLevelToRetry = Level.Error };
            this.appender.Client = mockedElasticClient.Object;

            var indexResponse = "{\"_index\":\"logEntry\",\"_type\":\"log\",\"_id\":\"20\",\"_version\":\"1.0.0\",\"created\":false}";
            var response = JsonConvert.DeserializeObject<Nest.IndexResponse>(indexResponse);
            mockedElasticClient.Setup(x => x.IndexDocumentAsync(It.IsAny<Model.LogEntry>(), 
                It.IsAny<CancellationToken>()))
                .Returns(Task.FromResult<Nest.IIndexResponse>(response));

            this.logService.Error("Testing error message", fixture.Create<InvalidOperationException>());
            this.logService.Debug("Testing debug message", fixture.Create<InvalidOperationException>());
            this.logService.Info("Testing info message", fixture.Create<InvalidOperationException>());

            Thread.Sleep(2000);

            mockedElasticClient.Verify(m => m.IndexDocumentAsync(It.IsAny<Model.LogEntry>(), It.IsAny<CancellationToken>()), Times.Exactly(4));
        }
    }
}
